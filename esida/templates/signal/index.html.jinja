{% extends 'base.html.jinja' %}

{% block title %}Signals{% endblock %}


{% block content %}
  <div class="d-md-flex flex-md-row-reverse align-items-center justify-content-between">
    <a class="btn btn-sm btn-outline-primary mb-2 mb-md-0" href="{{ url_for('signal')}}">Add new signal</a>
    <h1 class="bd-title" id="content">Signals</h1>
  </div>

  <div class="alert alert-info">
    This is just intended to allow entering temporal and spatially qualified signals for testing the pipeline.
  </div>

  <div class="row">

    <div class="col-12 col-md-6">
      <table class="table table-sm">

        <thead>
          <tr>
            <th>ID</th>
            <th>Reported</th>
            <th>Sex</th>
            <th>Age</th>
          </tr>
        </thead>

        <tbody>
          {% for s in signals %}
            <tr>
              <td><a href="{{ url_for('signal_show', signal_id=s.id) }}">{{ s.id }}</a></td>
              <td>{{ s.report_date }}</td>
              <td>{{ s.sex }}</td>
              <td>{{ s.age }}</td>
            </tr>
          {% endfor %}
        </tbody>
      </table>
    </div>

    <div class="col-12 col-md-6">
      <div id="map" style="width: 100%; height: 600px"></div>

        <div id="chart"></div>
    </div>

  </div>
{% endblock %}

{% block footer %}
<script>
    var map = get_base_map('map', {zoom: 6});

    var signals=[]

    {% for s in signals %}
        var s = L.marker([{{ s.point().y}}, {{ s.point().x}}] )
        .bindPopup(`<h4>Signal: {{ s.id }}</h4>`);
        signals.push(s);
    {% endfor %}

    var group_signals = L.featureGroup(signals).addTo(map);
    var layerControl = L.control.layers().addTo(map);
    layerControl.addOverlay(group_signals, 'Signals');
</script>

<script>



var options = {
    series: [{
        name: 'Cases',
        data: {{ data|to_json}}
    }],

    chart: {
        type: 'bar',
        height: 350
    },
    plotOptions: {
        bar: {
            horizontal: false,
            columnWidth: '55%',
            endingShape: 'rounded'
        },
    },
    dataLabels: {
        enabled: false
    },
    stroke: {
        show: true,
        width: 2,
        colors: ['transparent']
    },
    xaxis: {
        type: 'datetime'
    },
    fill: {
        opacity: 1
    },
    tooltip: {
        x: {
            format: "yyyy-MM-dd"
        }
    },
    annotations: {
        yaxis: [{
            y: 1,
            borderColor: '#FF4560',
            label: {
                borderColor: '#FF4560',
                    style: {
                    color: '#fff',
                    background: '#FF4560'
                },
                text: 'Alert'
            }
        }]
    }
};

var chart = new ApexCharts(document.querySelector("#chart"), options);
chart.render();




</script>

{% endblock %}
