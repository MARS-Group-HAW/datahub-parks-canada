{% extends 'base.html.jinja' %}

{% block title %}{{ parameter.get_title() }} ({{ parameter.parameter_id }}) - Parameters{% endblock %}

{% block head %}
  <link rel="schema.DC"       href="http://purl.org/dc/elements/1.1/" />
  <link rel="schema.DCTERMS"  href="http://purl.org/dc/terms/" />
  <meta name="DC.title"       content="{{ parameter.parameter_id }}" />
  <meta name="DC.subject"     content="{{ parameter.get_meta('subject') }}" />
  <meta name="DC.creator"     content="{{ parameter.get_meta('creator') }}" />
  <meta name="DC.description" content="{{ parameter.get_meta('description') }}" />
  <meta name="DC.publisher"   content="{{ parameter.get_meta('publisher') }}" />
  <meta name="DC.contributor" content="{{ parameter.get_meta('contributor') }}" />
  <meta name="DC.date"        content="{{ parameter.get_meta('date') }}" />
  <meta name="DC.type"        content="{{ parameter.get_meta('type') }}" />
  <meta name="DC.format"      content="{{ parameter.get_meta('format') }}" />
  <meta name="DC.identifier"  content="{{ parameter.get_meta('identifier') }}" />
  <meta name="DC.source"      content="{{ parameter.get_meta('source') }}" />
  <meta name="DC.language"    content="{{ parameter.get_meta('language') }}" />
  <meta name="DC.rights"      content="{{ parameter.get_meta('rights') }}" />
  <meta name="DC.coverage"    content="{{ parameter.get_meta('coverage') }}" />

  <script>
    const dl = {{ parameter.get_spec()|to_json}};
  </script>
{% endblock %}

{% block content %}
  <div class="d-md-flex flex-md-row-reverse align-items-center justify-content-between">

      <div class="mb-2 mb-md-0">
        <div class="btn-group">
            <a class="btn btn-sm btn-outline-primary" href="{{ url_for('download_parameter', parameter_id=parameter.parameter_id) }}">Download all data (CSV)</a>
            <button type="button" class="btn btn-sm btn-outline-primary dropdown-toggle dropdown-toggle-split" data-bs-toggle="dropdown" aria-expanded="false">
                <span class="visually-hidden">Toggle Dropdown</span>
            </button>
            <ul class="dropdown-menu">
                <li><a class="dropdown-item" href="{{ url_for('download_parameter', parameter_id=parameter.parameter_id, format='excel') }}">All (Excel)</a></li>
                <li><hr class="dropdown-divider"></li>
                {% for type in shape_types %}
                <li><a class="dropdown-item" href="{{ url_for('download_parameter', parameter_id=parameter.parameter_id, shape_type=type) }}">Download {{ type.title() }} (CSV)</a></li>
                {% endfor %}
                <li><hr class="dropdown-divider"></li>
                {% for type in shape_types %}
                <li><a class="dropdown-item" href="{{ url_for('download_parameter', parameter_id=parameter.parameter_id, shape_type=type, format='excel') }}">Download {{ type.title() }} (Excel)</a></li>
                {% endfor %}
            </ul>
        </div>

        <button type="button" class="btn btn-sm btn-outline-primary" data-bs-toggle="modal" data-bs-target="#api">API</button>
      </div>

    <h1 class="bd-title">{{ parameter.get_title() }} <small class="text-muted">({{ parameter.parameter_id }})</small></h1>
  </div>

  <div class="row">
    {% if parameter.is_loaded %}

    <div class="row">
      <div class="col">
        <p>
          Compare shape against means of regions and districts:
        </p>
      </div>
    </div>

    <div class="col-12 col-sm-6">

      <div class="mb-3">
        <div class="input-group input-group-sm mb-3" style="max-width: 400px">
          <select class="form-select js-map-shape_type" id="js-shape_type">
            {% for type in shape_types %}
            <option value="{{ type }}">{{ type.title() }}</option>
            {% endfor %}
          </select>

          {% if  parameter.time_col == 'year' %}
            <select class="form-select" id="js-map-date">
              {% for year in parameter.years_with_data() %}
              <option value="{{ year }}">{{ year }}</option>
              {% endfor %}
            </select>
          {% else %}

			{% if parameter.date_picker == 'month' %}
            	<input type="month" class="form-control" id="js-map-date" min="{{ parameter.get_first_time('%Y-%m') }}" max="{{ parameter.get_last_time('%Y-%m') }}">
			{% else %}
            	<input type="date" class="form-control" id="js-map-date" min="{{ parameter.get_first_time() }}" max="{{ parameter.get_last_time() }}">
			{% endif %}
          {% endif %}

          <button id="js-add-to-map" class="btn btn-outline-secondary btn-sm">Load map</button>
        </div>

        <div id="map" class="mb-1" style="width: 100%; height: 350px;"></div>

        {% if parameter.has_raw_data() %}
          <button class="btn btn-outline-secondary btn-sm" id="js-load-data">Load raw data</button>
        {% endif %}
      </div>
    </div>

    <div class="col-12 col-sm-6">
      <div class="input-group mb-3" style="max-width: 400px">
        <select class="form-select js-chosen-select" id="js-shape">
          {% for key in shapes.keys() %}
            <optgroup label="{{ key.title() }}">
              {% for shape in shapes[key] %}
                <option value="{{shape['id'] }}">{{ shape['name'] }}</option>
              {% endfor %}
            </optgroup>
          {% endfor %}
        </select>

        <button id="js-add-shape-to-chart" class="btn btn-outline-secondary btn-sm">Add to chart</button>
      </div>

      <div id="chart"></div>
    </div>
    <div class="col-12">


        <p>Data layer span:</p>
        <ul>
            <li>First: {{ parameter.get_first_time() }}</li>
            <li>Last: {{ parameter.get_last_time() }}</li>
        </ul>

      <p>Available parameter fields:</p>
      <ul>
      {% for pk in parameter.get_fields(only_numeric=False) %}
        <li><code>{{ pk }}</code></li>
      {% endfor %}
      </ul>
    </div>
    {% else %}
      <div class="col-12">
        <div class="alert alert-warning">Parameter is not loaded into the database!</div>
      </div>
    {% endif %}
  </div>

  <div>
    {{ parameter.get_description()|safe }}
  </div>


{% endblock %}

{% block footer %}


<div class="modal fade" id="api" tabindex="-1" aria-labelledby="api-modal-title" aria-hidden="true">
  <div class="modal-dialog modal-xl">
    <div class="modal-content">
      <div class="modal-header">
        <h1 class="modal-title fs-5" id="api-modal-title">API</h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">


<ul class="nav nav-tabs" id="myTab" role="tablist">
<li class="nav-item" role="presentation">
<button class="nav-link active" id="home-tab" data-bs-toggle="tab" data-bs-target="#api-python-pane" type="button" role="tab" aria-controls="home-tab-pane" aria-selected="true">Pyton</button>
</li>
<li class="nav-item" role="presentation">
<button class="nav-link" id="profile-tab" data-bs-toggle="tab" data-bs-target="#api-r-pane" type="button" role="tab" aria-controls="profile-tab-pane" aria-selected="false">R</button>
</li>
</ul>
<div class="tab-content" id="myTabContent">
  <div class="tab-pane fade show active" id="api-python-pane" role="tabpanel" aria-labelledby="home-tab" tabindex="0">

<pre><code>import requests
from urllib.parse import urlencode
from requests.auth import HTTPBasicAuth

import pandas as pd
import geopandas

# Run for local database
HOST = '{{ url_for('index', _external=True) }}'
auth = None

q = {}
d = requests.get(f"{HOST}/api/v1/parameter/{{parameter.parameter_id}}?{urlencode(q)}", auth=auth).json()
{{parameter.parameter_id}}_df = pd.DataFrame(d['data'])
</code></pre>


  </div>
  <div class="tab-pane fade" id="api-r-pane" role="tabpanel" aria-labelledby="profile-tab" tabindex="0">Comming soon ;)</div>
</div>




      </div>
    </div>
  </div>
</div>



{% if parameter.has_log() %}
<script>
$(document).ready(function() {
    $('#paramter-log').DataTable({
      pageLength: 25,
      columnDefs: [
        {targets: 'no-sort', orderable: false}
    ]});
});
</script>
{% endif %}


<script>
var map = get_base_map('map')

var url_base = '/api/v1/parameter_map/{{ parameter.parameter_id }}/'

var info = L.control();
info.onAdd = function (map) {
    this._div = L.DomUtil.create('div', 'info'); // create a div with a class "info"
    this.update();
    return this._div;
};

// method that we will use to update the control based on feature properties passed
info.update = function (props) {
    this._div.innerHTML = (props ?
        '<b>' + props.name + '</b><br />' + props.value
        : 'Hover over a shape');
};
info.addTo(map);


const choropleth_default = [
    {

        'color': '#FFEDA0'
    },
    {
        'color': '#DC500'
    },
    {
        'color': '#FFC500'
    },
    {
        'color': '#FF5B00'
    }
]

function getColor(d) {
    if (d == null) {
        return '#808080';
    }

    if(dl.choropleth) {

        for (var i = 0; i < dl.choropleth.length; i++) {
            var range = dl.choropleth[i];

            if (d >= range['from'] && d <= range['to']) {
                return range['color'];
            }
        }
    }

    return d >   cmap[7] ? '#800026' :
            d > cmap[6] ? '#BD0026' :
            d > cmap[5] ? '#E31A1C' :
            d > cmap[4] ? '#FC4E2A' :
            d > cmap[3] ? '#FD8D3C' :
            d > cmap[2] ? '#FEB24C' :
            d > cmap[1] ? '#FED976' :
                        '#FFEDA0';

    return d > 1000 ? '#800026' :
            d > 500  ? '#BD0026' :
            d > 200  ? '#E31A1C' :
            d > 100  ? '#FC4E2A' :
            d > 50   ? '#FD8D3C' :
            d > 20   ? '#FEB24C' :
            d > 10   ? '#FED976' :
                        '#FFEDA0';
}

function getBins() {
    if(dl.choropleth) {
        return dl.choropleth.length;
    }

    return 8;
}

function style(feature) {
    return {
        fillColor: getColor(feature.properties.value),
        weight: 1,
        opacity: 1,
        color: 'white',
        dashArray: '3',
        fillOpacity: 0.7
    };
}

function highlightFeature(e) {
    var layer = e.target;

    layer.setStyle({
        weight: 2,
        color: '#333',
        dashArray: '',
        fillOpacity: 0.7
    });

    layer.bringToFront();

    info.update(layer.feature.properties);
}

function resetHighlight(e) {
    on_map.resetStyle(e.target);
    info.update();
}

function zoomToFeature(e) {
    map.fitBounds(e.target.getBounds());
}

function onEachFeature(feature, layer) {
    layer.on({
        mouseover: highlightFeature,
        mouseout: resetHighlight,
        click: zoomToFeature
    });
}

var on_map = false;
var min_value = 0;
var max_value = 0;
var cmap = [];
var legend = false;

$('#js-add-to-map').on('click', function(e) {

    let date = $('#js-map-date').val();
    if (!date) {
        alert("Please select a date first.")
        return;
    }

  map.fire('dataloading');

  $.getJSON( url_base + $('#js-shape_type').val() + "/" + date, function(data) {

    if (on_map) {
      map.removeLayer(on_map);
    }

    min_value = data.min;
    max_value = data.max;

    var step = (max_value - min_value) / getBins();
    cmap = [min_value];

    for (var i = 1; i < getBins(); i++) {
      cmap[i] = min_value + step * i;
    }

    if (legend) {
      map.removeControl(legend);
    }

    legend = L.control({position: 'bottomright'});

    legend.onAdd = function (map) {
        var div = L.DomUtil.create('div', 'info legend'),
            grades = cmap,
            labels = [];

        // loop through our density intervals and generate a label with a colored square for each interval
        if (dl.choropleth) {
            for (var i = 0; i < dl.choropleth.length; i++) {
                div.innerHTML +=
                    '<i style="background:' + getColor(dl.choropleth[i]['from']) + '"></i> ' +
                    dl.choropleth[i]['from'].toFixed(dl.precision) + '&ndash;' + dl.choropleth[i]['to'].toFixed(dl.precision) + '<br>';
            }
        } else {
            for (var i = 0; i < grades.length; i++) {
                div.innerHTML +=
                    '<i style="background:' + getColor(grades[i] + (step*0.5)) + '"></i> ' +
                    grades[i].toFixed({{ parameter.precision }}) + (grades[i + 1] ? '&ndash;' + grades[i + 1].toFixed({{ parameter.precision }}) + '<br>' : '+');
            }
        }




        return div;
    };

    legend.addTo(map);

    on_map = L.geoJson(data.geojson, {
        style: style,
        onEachFeature: onEachFeature
    }).addTo(map);
    map.fitBounds(on_map.getBounds());
    map.fire('dataload');
}).fail(function(data) {

  if (on_map) {
    map.removeLayer(on_map);
  }
if (legend) {
    map.removeControl(legend);
  }
  var message = "An error occurred.";
  if ("error" in data.responseJSON) {
    message = data.responseJSON['error'];
  }
  alert(message);
  map.fire('dataload');
});
});




$('#js-load-data').on('click', function(e) {
  load_data_for_layer(map, dl);
});
</script>




{% if parameter.is_loaded %}
<script>
$(".js-chosen-select").chosen();

var options = {
  chart: {
      height: 350,
      type: 'line',
  },
  dataLabels: {
      enabled: false
  },
  series: [],
  title: {
      text: 'Compare parameter values',
  },
  markers: {
    size: 3,
    hover: {
      sizeOffset: 2
    }
  },
  stroke: {
    width: [1, 1],
    curve: 'straight',
    dashArray: [5, 5]
  },
  noData: {
    text: 'Select data...'
  },
  yaxis: {
    labels: {
      formatter: function (value) {
        var prec = {{ parameter.precision or -1 }}
        if (prec != -1) {
          return value.toFixed(prec);
        }

        return value;
      }
    },
  },
  xaxis: {
    type: 'datetime'
  },

  {% if parameter.time_col == 'year' %}
  tooltip: {
    x: {
      format: "yyyy"
    }
  }
  {% elif  parameter.time_col == 'date' %}
  tooltip: {
    x: {
      format: "yyyy-MM-dd"
    }
  }
  {% endif %}
}

var chart = new ApexCharts(
  document.querySelector("#chart"),
  options
);

chart.render();

{% for type in shape_types %}
$.getJSON('/shape/0/{{ parameter.parameter_id }}/{{ parameter.parameter_id }}/json?mean_for={{ type }}', function(response) {
  if (response['data'].length > 0) {
    chart.appendSeries({
      name: '{{ type.title() }} (mean)',
      data: response['data']
    });
  }
});
{% endfor %}

$('#js-add-shape-to-chart').on('click', function(e) {
  var shape_id = $('#js-shape option:selected').val();
  var shape_name = $("#js-shape option:selected").text();
  $.getJSON('/shape/' + shape_id + '/{{ parameter.parameter_id }}/{{ parameter.parameter_id }}/json', function(response) {
    chart.appendSeries({
      name: shape_name,
      data: response['data']
    })
  });
});
</script>
{% endif %}
{% endblock %}
